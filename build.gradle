plugins {
    id 'java-gradle-plugin'
    id 'eclipse'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.36.0'
}
apply from: 'version.gradle'

version = "4.2.0-j16-poc-SNAPSHOT"
println('Version: ' + version + ' Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    common
    mcp
    patcher
    userdev
}

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

configurations {
    all {
        exclude group: 'org.ow2.asm'
    }
    mcpImplementation.extendsFrom commonImplementation
    patcherImplementation.extendsFrom commonImplementation
    userdevImplementation.extendsFrom mcpImplementation
    implementation.extendsFrom mcpImplementation, patcherImplementation, userdevImplementation
}

jar {
    from sourceSets.common.output
    from sourceSets.mcp.output
    from sourceSets.patcher.output
    from sourceSets.userdev.output
}

task sourcesJar(type: Jar) {
    from sourceSets.common.allJava
    from sourceSets.mcp.allJava
    from sourceSets.patcher.allJava
    from sourceSets.userdev.allJava
    archiveClassifier = 'sources'
}

repositories {
	mavenLocal()
    jcenter()
    maven { url = 'https://maven.minecraftforge.net/' }
	maven { url = 'https://repo.gradle.org/gradle/libs-releases-local/' }
}

wrapper {
    gradleVersion = '6.8.1'
    distributionType = Wrapper.DistributionType.ALL
}

dependencies {
    commonImplementation gradleApi()
    commonImplementation 'commons-io:commons-io:2.8.0'
    commonImplementation 'com.google.code.gson:gson:2.8.6'
    commonImplementation 'com.google.guava:guava:30.1-jre'
    commonImplementation 'de.siegmar:fastcsv:2.0.0'
    commonImplementation 'net.minecraftforge:artifactural:2.0.3'
    commonImplementation 'org.apache.maven:maven-artifact:3.6.3'
    commonImplementation 'net.minecraftforge:srgutils:0.4.1'
    commonImplementation 'net.minecraftforge:DiffPatch:2.0.5:all'

    mcpImplementation sourceSets.common.output
    patcherImplementation sourceSets.mcp.output
    patcherImplementation sourceSets.common.output
    userdevImplementation sourceSets.mcp.output
    userdevImplementation sourceSets.common.output
}

compileJava {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

//Gradle doesn't add it's own source when doing the API. So lets hack it in!
import org.gradle.plugins.ide.eclipse.model.*
import org.gradle.plugins.ide.eclipse.model.internal.*
project.extensions.eclipse.classpath.file.whenMerged { Classpath cp ->
    def gradleSrc = gradle.gradleHomeDir.absolutePath.replace(File.separator, '/') + '/src/'
    cp.entries.each { entry ->
        if ((entry in AbstractLibrary) && entry.library.file.name.startsWith('gradle-')) {
            def type = (entry.library.file.name =~ "^gradle(-(.*))?-(${gradle.gradleVersion})")[0][2]
            if (type == 'api') type = 'core-api' //Gradle name is different for cores
            if (type == '') type = 'core'
            entry.sourcePath = new FileReferenceFactory().fromPath(gradleSrc + type)
        }
    }
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            artifact sourcesJar
            groupId 'tk.sciwhiz12.gradle'
            artifactId 'crucible'
//            version = versionInfo["raw_version"] + (versionInfo["snapshot"] ? "-SNAPSHOT" : "")
            version = "4.2.0-j16-poc-SNAPSHOT"
        }
    }
    repositories {
        maven {
            name 'projectLocal'
            url 'file://' + rootProject.file('repo').getAbsolutePath()
        }
        def remoteURL = project.findProperty("remoteURL")
        if (remoteURL != null) {
            maven {
                name 'remote'
                url = remoteURL
                credentials {
                    username project.findProperty("remoteUsername")
                    password project.findProperty("remotePassword")
                }
            }
        }
    }
}
